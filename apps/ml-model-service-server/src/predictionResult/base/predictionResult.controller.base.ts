/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PredictionResultService } from "../predictionResult.service";
import { PredictionResultCreateInput } from "./PredictionResultCreateInput";
import { PredictionResult } from "./PredictionResult";
import { PredictionResultFindManyArgs } from "./PredictionResultFindManyArgs";
import { PredictionResultWhereUniqueInput } from "./PredictionResultWhereUniqueInput";
import { PredictionResultUpdateInput } from "./PredictionResultUpdateInput";

export class PredictionResultControllerBase {
  constructor(protected readonly service: PredictionResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: PredictionResult })
  async createPredictionResult(
    @common.Body() data: PredictionResultCreateInput
  ): Promise<PredictionResult> {
    return await this.service.createPredictionResult({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [PredictionResult] })
  @ApiNestedQuery(PredictionResultFindManyArgs)
  async predictionResults(
    @common.Req() request: Request
  ): Promise<PredictionResult[]> {
    const args = plainToClass(PredictionResultFindManyArgs, request.query);
    return this.service.predictionResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: PredictionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async predictionResult(
    @common.Param() params: PredictionResultWhereUniqueInput
  ): Promise<PredictionResult | null> {
    const result = await this.service.predictionResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: PredictionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePredictionResult(
    @common.Param() params: PredictionResultWhereUniqueInput,
    @common.Body() data: PredictionResultUpdateInput
  ): Promise<PredictionResult | null> {
    try {
      return await this.service.updatePredictionResult({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: PredictionResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePredictionResult(
    @common.Param() params: PredictionResultWhereUniqueInput
  ): Promise<PredictionResult | null> {
    try {
      return await this.service.deletePredictionResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
