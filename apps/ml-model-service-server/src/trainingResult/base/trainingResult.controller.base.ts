/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrainingResultService } from "../trainingResult.service";
import { TrainingResultCreateInput } from "./TrainingResultCreateInput";
import { TrainingResult } from "./TrainingResult";
import { TrainingResultFindManyArgs } from "./TrainingResultFindManyArgs";
import { TrainingResultWhereUniqueInput } from "./TrainingResultWhereUniqueInput";
import { TrainingResultUpdateInput } from "./TrainingResultUpdateInput";

export class TrainingResultControllerBase {
  constructor(protected readonly service: TrainingResultService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrainingResult })
  async createTrainingResult(
    @common.Body() data: TrainingResultCreateInput
  ): Promise<TrainingResult> {
    return await this.service.createTrainingResult({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrainingResult] })
  @ApiNestedQuery(TrainingResultFindManyArgs)
  async trainingResults(
    @common.Req() request: Request
  ): Promise<TrainingResult[]> {
    const args = plainToClass(TrainingResultFindManyArgs, request.query);
    return this.service.trainingResults({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrainingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trainingResult(
    @common.Param() params: TrainingResultWhereUniqueInput
  ): Promise<TrainingResult | null> {
    const result = await this.service.trainingResult({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrainingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrainingResult(
    @common.Param() params: TrainingResultWhereUniqueInput,
    @common.Body() data: TrainingResultUpdateInput
  ): Promise<TrainingResult | null> {
    try {
      return await this.service.updateTrainingResult({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrainingResult })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrainingResult(
    @common.Param() params: TrainingResultWhereUniqueInput
  ): Promise<TrainingResult | null> {
    try {
      return await this.service.deleteTrainingResult({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
