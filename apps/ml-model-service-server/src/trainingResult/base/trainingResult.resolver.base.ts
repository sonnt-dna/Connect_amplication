/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrainingResult } from "./TrainingResult";
import { TrainingResultCountArgs } from "./TrainingResultCountArgs";
import { TrainingResultFindManyArgs } from "./TrainingResultFindManyArgs";
import { TrainingResultFindUniqueArgs } from "./TrainingResultFindUniqueArgs";
import { DeleteTrainingResultArgs } from "./DeleteTrainingResultArgs";
import { TrainingResultService } from "../trainingResult.service";
@graphql.Resolver(() => TrainingResult)
export class TrainingResultResolverBase {
  constructor(protected readonly service: TrainingResultService) {}

  async _trainingResultsMeta(
    @graphql.Args() args: TrainingResultCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrainingResult])
  async trainingResults(
    @graphql.Args() args: TrainingResultFindManyArgs
  ): Promise<TrainingResult[]> {
    return this.service.trainingResults(args);
  }

  @graphql.Query(() => TrainingResult, { nullable: true })
  async trainingResult(
    @graphql.Args() args: TrainingResultFindUniqueArgs
  ): Promise<TrainingResult | null> {
    const result = await this.service.trainingResult(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrainingResult)
  async deleteTrainingResult(
    @graphql.Args() args: DeleteTrainingResultArgs
  ): Promise<TrainingResult | null> {
    try {
      return await this.service.deleteTrainingResult(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
