/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, TrainingResult as PrismaTrainingResult } from "@prisma/client";

export class TrainingResultServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrainingResultCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trainingResult.count(args);
  }

  async trainingResults(
    args: Prisma.TrainingResultFindManyArgs
  ): Promise<PrismaTrainingResult[]> {
    return this.prisma.trainingResult.findMany(args);
  }
  async trainingResult(
    args: Prisma.TrainingResultFindUniqueArgs
  ): Promise<PrismaTrainingResult | null> {
    return this.prisma.trainingResult.findUnique(args);
  }
  async createTrainingResult(
    args: Prisma.TrainingResultCreateArgs
  ): Promise<PrismaTrainingResult> {
    return this.prisma.trainingResult.create(args);
  }
  async updateTrainingResult(
    args: Prisma.TrainingResultUpdateArgs
  ): Promise<PrismaTrainingResult> {
    return this.prisma.trainingResult.update(args);
  }
  async deleteTrainingResult(
    args: Prisma.TrainingResultDeleteArgs
  ): Promise<PrismaTrainingResult> {
    return this.prisma.trainingResult.delete(args);
  }
}
