/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { TrainingJobService } from "../trainingJob.service";
import { TrainingJobCreateInput } from "./TrainingJobCreateInput";
import { TrainingJob } from "./TrainingJob";
import { TrainingJobFindManyArgs } from "./TrainingJobFindManyArgs";
import { TrainingJobWhereUniqueInput } from "./TrainingJobWhereUniqueInput";
import { TrainingJobUpdateInput } from "./TrainingJobUpdateInput";

export class TrainingJobControllerBase {
  constructor(protected readonly service: TrainingJobService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: TrainingJob })
  async createTrainingJob(
    @common.Body() data: TrainingJobCreateInput
  ): Promise<TrainingJob> {
    return await this.service.createTrainingJob({
      data: {
        ...data,

        model: data.model
          ? {
              connect: data.model,
            }
          : undefined,

        dataset: data.dataset
          ? {
              connect: data.dataset,
            }
          : undefined,
      },
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        endTime: true,
        startTime: true,

        model: {
          select: {
            id: true,
          },
        },

        dataset: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [TrainingJob] })
  @ApiNestedQuery(TrainingJobFindManyArgs)
  async trainingJobs(@common.Req() request: Request): Promise<TrainingJob[]> {
    const args = plainToClass(TrainingJobFindManyArgs, request.query);
    return this.service.trainingJobs({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        endTime: true,
        startTime: true,

        model: {
          select: {
            id: true,
          },
        },

        dataset: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: TrainingJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async trainingJob(
    @common.Param() params: TrainingJobWhereUniqueInput
  ): Promise<TrainingJob | null> {
    const result = await this.service.trainingJob({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        status: true,
        endTime: true,
        startTime: true,

        model: {
          select: {
            id: true,
          },
        },

        dataset: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: TrainingJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateTrainingJob(
    @common.Param() params: TrainingJobWhereUniqueInput,
    @common.Body() data: TrainingJobUpdateInput
  ): Promise<TrainingJob | null> {
    try {
      return await this.service.updateTrainingJob({
        where: params,
        data: {
          ...data,

          model: data.model
            ? {
                connect: data.model,
              }
            : undefined,

          dataset: data.dataset
            ? {
                connect: data.dataset,
              }
            : undefined,
        },
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
          endTime: true,
          startTime: true,

          model: {
            select: {
              id: true,
            },
          },

          dataset: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: TrainingJob })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteTrainingJob(
    @common.Param() params: TrainingJobWhereUniqueInput
  ): Promise<TrainingJob | null> {
    try {
      return await this.service.deleteTrainingJob({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          status: true,
          endTime: true,
          startTime: true,

          model: {
            select: {
              id: true,
            },
          },

          dataset: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
