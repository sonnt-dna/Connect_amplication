/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  TrainingJob as PrismaTrainingJob,
  Model as PrismaModel,
  Dataset as PrismaDataset,
} from "@prisma/client";

export class TrainingJobServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.TrainingJobCountArgs, "select">
  ): Promise<number> {
    return this.prisma.trainingJob.count(args);
  }

  async trainingJobs(
    args: Prisma.TrainingJobFindManyArgs
  ): Promise<PrismaTrainingJob[]> {
    return this.prisma.trainingJob.findMany(args);
  }
  async trainingJob(
    args: Prisma.TrainingJobFindUniqueArgs
  ): Promise<PrismaTrainingJob | null> {
    return this.prisma.trainingJob.findUnique(args);
  }
  async createTrainingJob(
    args: Prisma.TrainingJobCreateArgs
  ): Promise<PrismaTrainingJob> {
    return this.prisma.trainingJob.create(args);
  }
  async updateTrainingJob(
    args: Prisma.TrainingJobUpdateArgs
  ): Promise<PrismaTrainingJob> {
    return this.prisma.trainingJob.update(args);
  }
  async deleteTrainingJob(
    args: Prisma.TrainingJobDeleteArgs
  ): Promise<PrismaTrainingJob> {
    return this.prisma.trainingJob.delete(args);
  }

  async getModel(parentId: string): Promise<PrismaModel | null> {
    return this.prisma.trainingJob
      .findUnique({
        where: { id: parentId },
      })
      .model();
  }

  async getDataset(parentId: string): Promise<PrismaDataset | null> {
    return this.prisma.trainingJob
      .findUnique({
        where: { id: parentId },
      })
      .dataset();
  }
}
