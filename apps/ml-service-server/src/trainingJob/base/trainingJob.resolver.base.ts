/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { TrainingJob } from "./TrainingJob";
import { TrainingJobCountArgs } from "./TrainingJobCountArgs";
import { TrainingJobFindManyArgs } from "./TrainingJobFindManyArgs";
import { TrainingJobFindUniqueArgs } from "./TrainingJobFindUniqueArgs";
import { CreateTrainingJobArgs } from "./CreateTrainingJobArgs";
import { UpdateTrainingJobArgs } from "./UpdateTrainingJobArgs";
import { DeleteTrainingJobArgs } from "./DeleteTrainingJobArgs";
import { Model } from "../../model/base/Model";
import { Dataset } from "../../dataset/base/Dataset";
import { TrainingJobService } from "../trainingJob.service";
@graphql.Resolver(() => TrainingJob)
export class TrainingJobResolverBase {
  constructor(protected readonly service: TrainingJobService) {}

  async _trainingJobsMeta(
    @graphql.Args() args: TrainingJobCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [TrainingJob])
  async trainingJobs(
    @graphql.Args() args: TrainingJobFindManyArgs
  ): Promise<TrainingJob[]> {
    return this.service.trainingJobs(args);
  }

  @graphql.Query(() => TrainingJob, { nullable: true })
  async trainingJob(
    @graphql.Args() args: TrainingJobFindUniqueArgs
  ): Promise<TrainingJob | null> {
    const result = await this.service.trainingJob(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => TrainingJob)
  async createTrainingJob(
    @graphql.Args() args: CreateTrainingJobArgs
  ): Promise<TrainingJob> {
    return await this.service.createTrainingJob({
      ...args,
      data: {
        ...args.data,

        model: args.data.model
          ? {
              connect: args.data.model,
            }
          : undefined,

        dataset: args.data.dataset
          ? {
              connect: args.data.dataset,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => TrainingJob)
  async updateTrainingJob(
    @graphql.Args() args: UpdateTrainingJobArgs
  ): Promise<TrainingJob | null> {
    try {
      return await this.service.updateTrainingJob({
        ...args,
        data: {
          ...args.data,

          model: args.data.model
            ? {
                connect: args.data.model,
              }
            : undefined,

          dataset: args.data.dataset
            ? {
                connect: args.data.dataset,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => TrainingJob)
  async deleteTrainingJob(
    @graphql.Args() args: DeleteTrainingJobArgs
  ): Promise<TrainingJob | null> {
    try {
      return await this.service.deleteTrainingJob(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Model, {
    nullable: true,
    name: "model",
  })
  async getModel(@graphql.Parent() parent: TrainingJob): Promise<Model | null> {
    const result = await this.service.getModel(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Dataset, {
    nullable: true,
    name: "dataset",
  })
  async getDataset(
    @graphql.Parent() parent: TrainingJob
  ): Promise<Dataset | null> {
    const result = await this.service.getDataset(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
