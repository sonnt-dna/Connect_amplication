/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { ObjectType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";

import {
  IsString,
  IsDate,
  IsEnum,
  IsOptional,
  IsNumber,
  Min,
  Max,
  MaxLength,
  ValidateNested,
} from "class-validator";

import { Type } from "class-transformer";
import { EnumModelStatus } from "./EnumModelStatus";
import { TrainingJob } from "../../trainingJob/base/TrainingJob";
import { Prediction } from "../../prediction/base/Prediction";

@ObjectType()
class Model {
  @ApiProperty({
    required: true,
    type: String,
  })
  @IsString()
  @Field(() => String)
  id!: string;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  createdAt!: Date;

  @ApiProperty({
    required: true,
  })
  @IsDate()
  @Type(() => Date)
  @Field(() => Date)
  updatedAt!: Date;

  @ApiProperty({
    required: false,
    enum: EnumModelStatus,
  })
  @IsEnum(EnumModelStatus)
  @IsOptional()
  @Field(() => EnumModelStatus, {
    nullable: true,
  })
  status?: "Option1" | null;

  @ApiProperty({
    required: false,
    type: Number,
  })
  @IsNumber()
  @Min(-999999999)
  @Max(999999999)
  @IsOptional()
  @Field(() => Number, {
    nullable: true,
  })
  accuracy!: number | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  name!: string | null;

  @ApiProperty({
    required: false,
    type: String,
  })
  @IsString()
  @MaxLength(1000)
  @IsOptional()
  @Field(() => String, {
    nullable: true,
  })
  version!: string | null;

  @ApiProperty({
    required: false,
    type: () => [TrainingJob],
  })
  @ValidateNested()
  @Type(() => TrainingJob)
  @IsOptional()
  trainingJobs?: Array<TrainingJob>;

  @ApiProperty({
    required: false,
    type: () => [Prediction],
  })
  @ValidateNested()
  @Type(() => Prediction)
  @IsOptional()
  predictions?: Array<Prediction>;
}

export { Model as Model };
